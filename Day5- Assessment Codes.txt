Attempt #1
Oct 29, 5:28 PM
Marks: 3
Question 1
Marks: 1/1

Exception hanlding in java
Write a Java program that takes two integers as input and performs division. The program should handle exceptions for invalid input (non-integer input) and division by zero. The program should continue to prompt the user for valid input until successful division is performed.



Requirements:

Handle InputMismatchException if the user inputs non-integer values.
Handle ArithmeticException if the user attempts to divide by zero.
Use a loop to ensure the program continues to prompt the user until valid input is received and the division is successfully performed.
Sample Input and Output:
Sample Run 1:
Enter the first number: 10
Enter the second number: 2
Result: 5

Sample Run 2:
Enter the first number: 10
Enter the second number: 0
Cannot divide by zero. Please enter a valid divisor.
Enter the second number: 2
Result: 5

Sample Run 3:
Enter the first number: ten
Invalid input. Please enter an integer.
Enter the first number: 10
Enter the second number: 2
Result: 5

Your answer

import java.util.InputMismatchException;
import java.util.Scanner;

public class DivisionProgram {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num1 = 0, num2 = 0;

        while (true) {
            try {
                num1 = sc.nextInt();
                break;
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter an integer.");
                sc.nextLine(); // clear invalid input
            }
        }

        while (true) {
            try {
                num2 = sc.nextInt();

                if (num2 == 0) {
                    System.out.println("Cannot divide by zero. Please enter a valid divisor.");
                    continue;
                }

                int result = num1 / num2;
                System.out.println("Result: " + result);
                break;

            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter an integer.");
                sc.nextLine();
            }
        }

        sc.close();
    }
}
Comment:

All 2 test cases passed successfully.

Question 2
Marks: 1/1

Multiple Catch Blocks
You are required to catch Arithmetic or number format exceptions if present using multiple catch blocks in the code for finding of 99 with the number entered by user, else print "n is a factor of 99" or "n is not a factor of 99".

Sample Input

5

Output Format

5 is a not a factor of 99


Input

hi

Output

Number Format Exception java.lang.NumberFormatException: For input string: "hi"

Your answer

import java.util.Scanner;

public class Test {
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        
        try {
            int n = scn.nextInt();
            
            try {
                if (99 % n == 0) {
                    System.out.println(n + " is a factor of 99");
                } else {
                    System.out.println(n + " is a not a factor of 99");
                }
            } catch (ArithmeticException e) {
                System.out.println("Arithmetic Exception java.lang.ArithmeticException: / by zero");
            }
            
        } catch (Exception e) {
            System.out.println("Number Format Exception java.lang.NumberFormatException: For input string: \"" + scn.next() + "\"");
        }
        
        scn.close();
    }
}
Comment:

All 2 test cases passed successfully.

Question 3
Marks: 0/1

Exception Handling
Write a Java program to create a method that takes a string as input and throws an exception if the string does not contain vowels.



Sample Output:

Original string: Java handling and managing exceptions

String contains vowels.



Original string: Typy gyps fly.

String does not contain any vowels

No answer

Question 4
Marks: 1/1

Generic Data Analysis using JAVA
Description:
You are working on a data analysis module that needs to process different types of data. Implement a class named DataAnalyzer with the following requirements:


Constructor:

The class should have a constructor that takes an array of type T as its parameter and initializes an internal data structure to store the provided array.

Calculate Average Method:

Implement a method named calculateAverage that calculates and returns the average of the elements in the array.
Ensure that the method works for numeric types (e.g., Integer, Double) and does not require a separate implementation for each type.
Find Maximum Method:

Implement a method named findMaximum that finds and returns the maximum element in the array.
Ensure that the method works for comparable types (e.g., Integer, String) and does not require a separate implementation for each type.
Data Summary Method: (Pre-Implemented as a Boiler Plate Code)

Implement a method named dataSummary that prints a summary of the data, including the average and maximum values.


Sample Input:

2

4

45.9

46.8

57.3

37.8

Sample Output:

Data Summary:

Average: 46.95

Maximum: 57.3







Your answer

import java.util.*;

public class DataAnalyzer<T extends Number & Comparable<T>> {

    private T[] data;

    // Constructor
    public DataAnalyzer(T[] data) {
        this.data = data;
    }

    // Method to calculate average (works for numeric types)
    public double calculateAverage() {
        double sum = 0.0;
        for (T value : data) {
            sum += value.doubleValue();  // convert to double for all numeric types
        }
        return sum / data.length;
    }

    // Method to find maximum (works for comparable types)
    public T findMaximum() {
        T max = data[0];
        for (T value : data) {
            if (value.compareTo(max) > 0) {
                max = value;
            }
        }
        return max;
    }

    // Method to print summary
    public void dataSummary() {
        System.out.println("Data Summary:");
        System.out.println("Average: " + String.format("%.1f", calculateAverage()));
        System.out.println("Maximum: " + findMaximum());
    }

    // Main method for testing
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int ch = sc.nextInt();   // choice: 1=Integer, 2=Double, 3=Short, 4=Float
        int size = sc.nextInt(); // array size

        if (ch == 1) {
            Integer[] intData = new Integer[size];
            for (int i = 0; i < size; i++) {
                intData[i] = sc.nextInt();
            }
            DataAnalyzer<Integer> analyzer = new DataAnalyzer<>(intData);
            analyzer.dataSummary();

        } else if (ch == 2) {
            Double[] doubleData = new Double[size];
            for (int i = 0; i < size; i++) {
                doubleData[i] = sc.nextDouble();
            }
            DataAnalyzer<Double> analyzer = new DataAnalyzer<>(doubleData);
            analyzer.dataSummary();

        } else if (ch == 3) {
            Short[] shortData = new Short[size];
            for (int i = 0; i < size; i++) {
                shortData[i] = sc.nextShort();
            }
            DataAnalyzer<Short> analyzer = new DataAnalyzer<>(shortData);
            analyzer.dataSummary();

        } else if (ch == 4) {
            Float[] floatData = new Float[size];
            for (int i = 0; i < size; i++) {
                floatData[i] = sc.nextFloat();
            }
            DataAnalyzer<Float> analyzer = new DataAnalyzer<>(floatData);
            analyzer.dataSummary();
        }
    }
}
Comment:

All 3 test cases passed successfully.
